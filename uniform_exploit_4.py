from datetime import datetime
import hydra
import json
import numpy as np
from omegaconf import OmegaConf, DictConfig
import os
import pyspiel
import random
import time
import torch
import traceback
import uuid

from algorithms.eas_exploitability import compute_exploitability, build_traverser
from algorithms.runner import get_runner_cls
from utils import log_to_csv, get_metadata, log_memory_usage_periodically
import argparse

def compute_exploitability_wrapper(
    traverser,
    log_file,
    game_name,
    model_p0,
    model_p1,
    step,
    action_selection=["sto", "sto"],
):
    print("Computing exploitability... (this can take a few minutes)")
    t0_exploitability = time.time()
    ev0, expl0, expl1 = compute_exploitability(
        model_p0,
        model_p1,
        traverser=traverser,
        batch_size=400_000,
        action_selection=action_selection,
        game_name=game_name,
    )
    log_data = {
        "global_step": step,
        "avg_score_response": (expl0 + expl1) / 2,
        "avg_score_p0": ev0 + expl1,
        "avg_score_p1": -ev0 + expl0,
        "ev0": ev0,
        "expl0": expl0,
        "expl1": expl1,
        "timestamp": time.time(),
        "computation_duration": time.time() - t0_exploitability,
    }
    print(f'avg_score_response={(expl0 + expl1) / 2}')
    log_to_csv(log_data, log_file)

class UniformAgent(torch.nn.Module):
    def __init__(self, num_actions):
        super(UniformAgent, self).__init__()
        self.num_actions = num_actions

    def forward(self, obs):
        return torch.ones(obs.shape[0], self.num_actions)

def main(args):
    game = args.game
    traverser = build_traverser(game)

    model = UniformAgent(16)
    ev0, expl0, expl1 = compute_exploitability(model, model,traverser=traverser, game_name=game)
    print("=================================================")
    print("Results for game: ", game)
    print("Ev0: ", ev0)
    print("Expl0: ", expl0)
    print("Expl1: ", expl1)
    print("=================================================")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Uniform Exploitability Solver")
    parser.add_argument("--game", type=str, default="classical_dark_hex_4", help="Name of the game", choices=["classical_phantom_ttt", "abrupt_phantom_ttt", "classical_dark_hex", "abrupt_dark_hex",])
    args = parser.parse_args()
    main(args)